syntax = "proto3";

package ScriptsOfTributeGRPC;

import "enums.proto";
import "basics.proto";

message Empty {}

message SelectPatronRequest {
    repeated PatronIdProto availablePatrons = 1;
    int32 round = 2;
}

message PlayRequest {
    GameStateProto gameState = 1;
    repeated Move possibleMoves = 2;
    int64 remainingTimeMs = 3;
}

message GameEndRequest {
    EndGameState state = 1;
    GameStateProto finalBoardState = 2;
}

message ApplyMoveRequest {
    string state_id = 1;
    Move move = 2;
    uint64 seed = 3;
}

message PatronIdMessage {
	PatronIdProto patronId = 1;
}

message StateId {
    string id = 1;
}

message GameStateProto {
    string state_id = 1;
    PatronStatesProto patron_states = 2;
    repeated UniqueCardProto tavern_available_cards = 3;
    BoardStateProto board_state = 4;
    repeated string upcoming_effects = 5;
    repeated string start_of_next_turn_effects = 6;
    PlayerProto current_player = 7;
    EnemyPlayerProto enemy_player = 8;
    repeated string completed_actions = 9;
    repeated UniqueCardProto tavern_cards = 10;
    ChoiceProto pending_choice = 11;
    EndGameState end_game_state = 12;
}

message SeededGameStateProto {
    string state_id = 1;
    PatronStatesProto patron_states = 2;
    repeated UniqueCardProto tavern_available_cards = 3;
    BoardStateProto board_state = 4;
    repeated string upcoming_effects = 5;
    repeated string start_of_next_turn_effects = 6;
    PlayerProto current_player = 7;
    PlayerProto enemy_player = 8;
    repeated string completed_actions = 9;
    repeated UniqueCardProto tavern_cards = 10;
    ChoiceProto pending_choice = 11;
    EndGameState end_game_state = 12;
	uint64 InitialSeed = 13;
    uint64 CurrentSeed = 14;
}

message RegistrationStatus {
    string name = 1;
    string message = 2;
}

message SimulationResult {
    SeededGameStateProto gameState = 1;
    repeated Move possibleMoves = 2;
}

service AIService {
    rpc RegisterBot(Empty) returns (RegistrationStatus);

    rpc PregamePrepare(Empty) returns (Empty);

    rpc SelectPatron(SelectPatronRequest) returns (PatronIdMessage);

    rpc Play(PlayRequest) returns (Move);

    rpc GameEnd(GameEndRequest) returns (Empty);

    rpc CloseServer(Empty) returns (Empty);
}

service EngineService {
    rpc ApplyMove(ApplyMoveRequest) returns (SimulationResult);
    rpc ReleaseState(StateId) returns (Empty);
}